#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CLICK {
            bindings = <&mkp MB1>;
            key-positions = <0 1>;
        };

        RIGHT_CLICK {
            bindings = <&mkp MB2>;
            key-positions = <10 11>;
        };

        MIDDLE_CLICK {
            bindings = <&mkp MB3>;
            key-positions = <20 21>;
        };

        CAPSLOCK_KEY {
            bindings = <&caps_word>;
            key-positions = <27 26>;
        };

        ENGLISH_KEY {
            bindings = <&kp F10>;
            key-positions = <6 7>;
        };

        TOGGLE_INPUT {
            bindings = <&kp LA(GRAVE)>;
            key-positions = <16 17>;
        };

        BACKSPACE_KEY {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };

        ENTER_KEY {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
        };

        DELETE_KEY {
            bindings = <&kp DELETE>;
            key-positions = <28 29>;
        };

        SWITCH_ON {
            bindings = <&to 0>;
            key-positions = <30 38>;
            layers = <7 1>;
        };

        SWITCH_OFF {
            bindings = <&to 7>;
            key-positions = <30 38>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&lt 5 Q                            &kp W  &kp E  &kp R  &kp T                           &kp Y        &kp U     &kp I      &kp O     &kp P
&lt 3 A                            &kp S  &kp D  &kp F  &kp G                           &kp H        &kp J     &kp K      &kp L     &lt 3 SEMICOLON
&mt LEFT_SHIFT Z                   &kp X  &kp C  &kp V  &kp B                           &kp N        &kp M     &kp COMMA  &kp DOT   &mt LEFT_SHIFT MINUS
&mt LA(LC(LG(LEFT_SHIFT))) ESCAPE                       &kp LGUI  &lt 2 TAB  &kp LCTRL  &lt 1 ENTER  &kp RALT  &kp SPACE  &kp BSPC  &kp DELETE
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp NUMBER_1                &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                      &kp LC(LEFT)        &kp LC(DOWN_ARROW)  &kp LC(UP_ARROW)  &kp LC(RIGHT_ARROW)  &kp HOME
&kp N6                      &kp N7        &kp N8        &kp N9        &kp N0                            &kp LEFT_ARROW      &kp DOWN_ARROW      &kp UP_ARROW      &kp RIGHT_ARROW      &kp PG_UP
&kp PERCENT                 &kp FSLH      &kp ASTERISK  &kp PLUS      &kp EQUAL                         &kp LA(LEFT_ARROW)  &kp LA(DOWN_ARROW)  &kp LA(UP_ARROW)  &kp LA(RIGHT_ARROW)  &kp PAGE_DOWN
&kp LA(LC(LG(LEFT_SHIFT)))                                            &kp LEFT_GUI  &kp TAB  &kp RCTRL  &trans              &kp RIGHT_ALT       &kp LANG2         &kp LANG1            &kp END
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION             &kp AT_SIGN  &kp HASH       &kp DOLLAR        &kp PERCENT                                  &kp CARET              &kp AMPERSAND    &kp ASTERISK       &kp PLUS          &kp EQUAL
&kp QUESTION                &kp TILDE    &kp GRAVE      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES                            &kp LEFT_PARENTHESIS   &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LESS_THAN     &kp COLON
&kp RA(SEMICOLON)           &kp RA(X)    &kp RA(EQUAL)  &kp RA(Y)         &kp LA(N8)                                   &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp GREATER_THAN  &kp UNDERSCORE
&kp LA(LC(LG(LEFT_SHIFT)))                                                &kp LGUI           &kp TAB  &kp NON_US_BSLH  &kp EQUAL              &kp TILDE        &kp PIPE           &kp BSLH          &kp SLASH
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp F1                      &kp F2   &kp F3   &kp F4   &kp F5                                 &kp LG(F13)   &kp LA(F13)   &kp LG(LS(S))  &kp LG(LA(F13))  &kp F16
&kp F6                      &kp F7   &kp F8   &kp F9   &kp F10                                &caps_word    &kp LANG2     &kp LANG1      &kp GLOBE        &kp ESC
&kp F11                     &kp F12  &kp F13  &kp F14  &kp F15                                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3     &bt BT_CLR
&kp LA(LC(LG(LEFT_SHIFT)))                             &kp LS(LG(M))  &kp LS(LG(M))  &kp F17  &kp F18       &kp F19       &kp F20        &kp F21          &kp F22
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&kp N1          &kp N2          &kp N3        &kp N4     &kp N5                  &kp N6         &kp N7     &kp N8  &kp N9     &kp N0
&kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none                   &kp PAGE_UP    &mkp LCLK  &none   &mkp RCLK  &mkp MCLK
&none           &none           &none         &none      &none                   &kp PAGE_DOWN  &none      &none   &none      &none
&none                                                    &trans  &trans  &trans  &trans         &trans     &trans  &trans     &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans          &trans          &trans        &trans           &trans
&trans  &trans  &trans  &trans  &trans                  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
&trans  &trans  &trans  &trans  &trans                  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans                          &trans  &trans  &trans  &trans          &trans          &trans        &trans           &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans                          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        none {
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans                          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
